{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["item","id","v4","name","item2","item3","console","log","App","todo","removeTodo","useState","text","setText","title","items","current","complete","state","setState","className","type","value","onChange","e","target","onClick","prev","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","isDragging","draggableProps","dragHandleProps","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAAe,I,2CCSTA,EAAO,CACXC,GAAIC,eACJC,KAAM,OAEFC,EAAQ,CACZH,GAAIC,eACJC,KAAM,SAEFE,EAAQ,CACZJ,GAAIC,eACJC,KAAM,QAERG,QAAQC,IAAIP,GAuJGQ,MAtJf,SAAaC,EAAKC,GAAY,MAEJC,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,OAIFF,mBAAS,CACjCF,KAAM,CACJK,MAAO,OACPC,MAAO,CAACf,EAAMI,EAAOC,IAEvBW,QAAS,CACPF,MAAO,UACPC,MAAO,IAETE,SAAU,CACRH,MAAO,WACPC,MAAO,MAfiB,mBAIrBG,EAJqB,KAIdC,EAJc,KA+E5B,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,uBACAA,UAAW,OACTC,KAAK,OACLC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAOX,EAAQW,EAAEC,OAAOH,UAGpC,wBAAQI,QAjCE,WACdP,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEElB,KAAM,CACJK,MAAO,OACPC,MAAM,CACJ,CACEd,GAAIC,eACJC,KAAMS,IAHL,mBAKAe,EAAKlB,KAAKM,cAKrBF,EAAQ,KAiBJ,2BAEF,cAAC,IAAD,CAAiBe,UAvEC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OAIpC,GAHAxB,QAAQC,IAAI,OAAQuB,GACpBxB,QAAQC,IAAI,KAAMsB,GAEbA,EAIL,GACEA,EAAYE,QAAUD,EAAOC,OAC7BF,EAAYG,cAAgBF,EAAOE,YAFrC,CASA,IAAMC,EAAQ,eAAQf,EAAMY,EAAOE,aAAajB,MAAMe,EAAOC,QAC7DZ,GAAS,SAACQ,GAaR,OAZAA,EAAI,eAAQA,IAGPG,EAAOE,aAAajB,MAAMmB,OAAOJ,EAAOC,MAAO,GAGpDJ,EAAKE,EAAYG,aAAajB,MAAMmB,OAClCL,EAAYE,MACZ,EACAE,GAGKN,UAnBPrB,QAAQC,IAAI,kCAPZD,QAAQC,IAAI,6BAkEZ,SAMG4B,IAAEC,IAAIlB,GAAO,SAACmB,EAAMC,GACnB,OACE,sBAAelB,UAAU,aAAzB,UAEE,6BAAKiB,EAAKvB,QAEV,cAAC,IAAD,CAAWkB,YAAaM,EAAxB,SACG,SAACC,EAAUC,GAEV,OADAlC,QAAQC,IAAIiC,GAEV,8CACEC,IAAKF,EAASG,UACVH,EAASI,gBAFf,IAGEvB,UAAW,gBAHb,UAMGiB,EAAKtB,MAAMqB,KAAI,SAACQ,EAAIb,GACnB,OACE,cAAC,IAAD,CAEEA,MAAOA,EACPc,YAAaD,EAAG3C,GAHlB,SAKG,SAACsC,EAAUC,GAGV,OAFAlC,QAAQC,IAAIiC,GAGV,yDACEpB,UAAS,eAAUoB,EAASM,YAAc,YAC1CL,IAAKF,EAASG,UACVH,EAASQ,gBACTR,EAASS,iBAJf,aAMGJ,EAAGzC,UAdLyC,EAAG3C,OAqBbsC,EAASU,qBAtCVX,YC7GPY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2e290858.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport _, { keyBy } from \"lodash\";\nimport { v4 } from \"uuid\";\nimport {RiCloseCircleLine} from 'react-icons/ri'\n// v4 is just used to generate random IDs.\n\nconst item = {\n  id: v4(),\n  name: \"Eat\",\n};\nconst item2 = {\n  id: v4(),\n  name: \"Sleep\",\n};\nconst item3 = {\n  id: v4(),\n  name: \"Code\",\n};\nconsole.log(item);\nfunction App(todo,removeTodo) {\n  //Creating data and a state hook that takes arguments of three columns.\n  const [text, setText] = useState(\"\");\n\n  const [state, setState] = useState({\n    todo: {\n      title: \"Todo\",\n      items: [item, item2, item3],\n    },\n    current: {\n      title: \"Current\",\n      items: [],\n    },\n    complete: {\n      title: \"Complete\",\n      items: [],\n    },\n  });\n\n  //HandleDragEnd function for logic\n  const handleDragEnd = ({ destination, source }) => {\n    console.log(\"from\", source);\n    console.log(\"to\", destination);\n\n    if (!destination) {\n      console.log(\"not dropped in droppable\");\n      return;\n    }\n    if (\n      destination.index === source.index &&\n      destination.droppableId === source.droppableId\n    ) {\n      console.log(\"dropped in the same place\");\n\n      return;\n    }\n    // Creating a copy of an item before removing from state\n    const itemCopy = { ...state[source.droppableId].items[source.index] };\n    setState((prev) => {\n      prev = { ...prev };\n\n      //Remove from previous items array\n      prev[source.droppableId].items.splice(source.index, 1);\n\n      //Adding to new items array location\n      prev[destination.droppableId].items.splice(\n        destination.index,\n        0,\n        itemCopy\n      );\n\n      return prev;\n    });\n  };\n\n  //Function for adding a todo\n  const addItem = () => {\n    setState((prev) => {\n      return {\n        ...prev,\n        todo: {\n          title: \"Todo\",\n          items: [\n            {\n              id: v4(),\n              name: text,\n            },\n            ...prev.todo.items,\n          ],\n        },\n      };\n    });\n    setText(\"\");\n  };\n\nconst removeTask =() =>{\n\n}\n\n  return (\n    <div className=\"App\">\n      <div className='todo' >\n        <input\n        className= 'todo'\n          type=\"text\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n       \n        <button onClick={addItem}>Add A Task</button>\n      </div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        {/*Use the lodash to load our arrays easy and simple with no redundancy */}\n        {/* Callback Function*/}\n        {/* key is the Droppable items*/}\n        {/* Provided and snapshot are props provided by the api dnd*/}\n\n        {_.map(state, (data, key) => {\n          return (\n            <div key={key} className=\"div column\">\n              {/* This is for the titles to be above the column*/}\n              <h3>{data.title}\n              </h3>\n              <Droppable droppableId={key}>\n                {(provided, snapshot) => {\n                  console.log(snapshot);\n                  return (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.droppableProps}\n                      className={\"droppable-col\"}\n                    >\n                      \n                      {data.items.map((el, index) => {\n                        return (\n                          <Draggable\n                            key={el.id}\n                            index={index}\n                            draggableId={el.id}\n                          >\n                            {(provided, snapshot) => {\n                              console.log(snapshot);\n\n                              return (\n                                <div\n                                  className={`item ${snapshot.isDragging && \"dragging\"}`}\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                >\n                                  {el.name}\n                                </div>\n                              );\n                            }}\n                          </Draggable>\n                        );\n                      })}\n                      {provided.placeholder}\n                    </div>\n                  );\n                }}\n              </Droppable>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}